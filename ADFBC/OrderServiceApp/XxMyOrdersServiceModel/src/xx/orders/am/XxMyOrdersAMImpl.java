package xx.orders.am;
import java.util.TimeZone;
import com.google.android.gcm.server.Message;
import com.google.android.gcm.server.Result;
import com.google.android.gcm.server.Sender;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

import java.util.UUID;

import oracle.jbo.JboException;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.quartz.CronScheduleBuilder;
import org.quartz.Job;
import static org.quartz.JobBuilder.newJob;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerFactory;

import org.quartz.Trigger;

import org.quartz.TriggerBuilder;

import xx.orders.view.XxMyLocationsVORowImpl;
import xx.orders.view.XxMyOrderARHeaderVORowImpl;
import xx.orders.view.XxMyOrdersVORowImpl;
import xx.orders.view.XxmyorderAlertDetailsVORowImpl;
import xx.orders.view.common.XxMyOrdersVOSDOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 10 08:28:06 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxMyOrdersAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public XxMyOrdersAMImpl() {
    }

    /**
     * Container's getter for XxMyOrdersVO.
     * @return XxMyOrdersVO
     */
    public ViewObjectImpl getXxMyOrdersVO() {
        return (ViewObjectImpl) findViewObject("XxMyOrdersVO");
    }
    
    public List<XxMyOrderARHeaderVORowImpl> getARForUser(String orderNumber,Integer noOfDays, Integer noOfRows, String userName,String orderBy,String fetchClosedOrders,String filterDateType) {
        ViewObjectImpl arvo = this.getXxMyOrderARHeaderVO1();
        ArrayList<XxMyOrderARHeaderVORowImpl> userARs=new ArrayList<XxMyOrderARHeaderVORowImpl>();
       
        if("DueDate".equals(filterDateType)){
            arvo=this.getXxMyOrderARHeaderDDVO1();
            System.out.println("using duedatesortedvo");
        
        }
        
        
        switch(orderBy) {
        case "datedesc":
            arvo.setOrderByClause("trx_date desc");
            break;
        case "date":
            arvo.setOrderByClause("trx_date");
            break;
        case "amountdesc":
                arvo.setOrderByClause("amount_due desc");
                break;
            case "amount":
                arvo.setOrderByClause("amount_due");
                break;
        }
        arvo.applyViewCriteria(null);
        arvo.setNamedWhereClauseParam("user_name", userName);
        arvo.setNamedWhereClauseParam("bindNoOfDays", noOfDays);
        arvo.setNamedWhereClauseParam("bindOrderNum", orderNumber);
        if("No".equalsIgnoreCase(fetchClosedOrders)) {
         arvo.setApplyViewCriteriaName("statusCriteria");
        }
        arvo.setMaxFetchSize(noOfRows);
        arvo.executeQuery();
        while(arvo.hasNext()){
            userARs.add((XxMyOrderARHeaderVORowImpl)arvo.next());
        }
        return userARs;
        
    }
    public List<XxMyOrdersVORowImpl> getRequestedOrders(Integer noOfDays, Integer noOfRows, String userName,String orderBy,String fetchClosedOrders,String filterDateType) {
        System.out.println("+++++++++++++++++++++++++++"+filterDateType);
        ViewObjectImpl myOrdersVO= null;
            myOrdersVO=getXxMyOrdersVO();
        if("FulfillmentDate".equals(filterDateType)){
            myOrdersVO=getXxMyOrdersDateSortedVO1();
            System.out.println("using datesortedvo");
            //myOrdersVO.setOrderByClause("ordered_date");
        }
        else {
            myOrdersVO=getXxMyOrdersVO();
            //myOrdersVO.setOrderByClause("total_ordered_value");
        }
            switch(orderBy) {
            case "datedesc":
                myOrdersVO.setOrderByClause("ordered_date desc");
                break;
            case "date":
                myOrdersVO.setOrderByClause("ordered_date");
                break;
            case "amountdesc":
                myOrdersVO.setOrderByClause("total_ordered_value desc");
                break;
            case "amount":
                myOrdersVO.setOrderByClause("total_ordered_value");
                break;
            case "fuldatedesc":
                myOrdersVO.setOrderByClause("fulfillment_date desc");
                break;
            case "fuldate":
                myOrdersVO.setOrderByClause("fulfillment_date");
            }
        myOrdersVO.applyViewCriteria(null);
        myOrdersVO.setNamedWhereClauseParam("bindUserName", userName);
        myOrdersVO.setNamedWhereClauseParam("bindNoOfDays", noOfDays);
        //myOrdersVO.setNamedWhereClauseParam("bindNoOfRows", NoOfRows);
        //myOrdersVO.setNamedWhereClauseParam("bindLocation", location);
        System.out.println("now setting closedorderstatus"+fetchClosedOrders);
        if("No".equals(fetchClosedOrders)) {
            myOrdersVO.setApplyViewCriteriaName("statusCriteria");
        }
        System.out.println("now setting orderby"+orderBy);
        System.out.println("now setting noOfRows"+noOfRows);
        myOrdersVO.setMaxFetchSize(noOfRows);
        myOrdersVO.executeQuery();
        ArrayList<XxMyOrdersVORowImpl> myOrderList=new ArrayList<XxMyOrdersVORowImpl>();
        while(myOrdersVO.hasNext()) {
            myOrderList.add((XxMyOrdersVORowImpl)myOrdersVO.next());
        }
        return myOrderList;
    }
    
    public List<XxMyLocationsVORowImpl> getCustomerLocations(Long custAccountId) {
        ViewObjectImpl myLocationsVO= (ViewObjectImpl)getXxMyLocationsVO();
        myLocationsVO.setNamedWhereClauseParam("bindCustAccountId", custAccountId);
        myLocationsVO.executeQuery();
        ArrayList<XxMyLocationsVORowImpl> myLocationsList=new ArrayList<XxMyLocationsVORowImpl>();
        while(myLocationsVO.hasNext()) {
            myLocationsList.add((XxMyLocationsVORowImpl)myLocationsVO.next());
        }
        return myLocationsList;
    }

    public String pushNotifications(){
        String GOOGLE_APIKEY = "AIzaSyBFmJ-Sa4k4F0L0dLPPQ89RO6QaOdYYjpI";
        //String GOOGLE_APIKEY = "AIzaSyAd2NwpshJyp8AoPRSjDM6Oe-c0-x-pxic";
        Sender sender = new Sender(GOOGLE_APIKEY);
        String retMsg = "";
        
        // Invoke the PL/SQL
        
        //xxmyorders_get_all_alerts
        callAlertFunction();
        
        ViewObjectImpl vo = getXxmyorderAlertDetailsVO1();
        vo.executeQuery();
        while(vo.hasNext()){
            XxmyorderAlertDetailsVORowImpl row = (XxmyorderAlertDetailsVORowImpl)vo.next();
        
       
       // String regId = "APA91bHn9_FMiLCky3jmpLVD_L-zJLu-t90VcCIoJycZ2c910jvDhvHyYFDfbe7Ed96kS1GTuaXcv1C5YxHXIBM5TqMKf_SycZenlHzeMK5H5-OcmcVUk2tDfB42EfEPfjnNiCAsAR2Q";
       String regId = row.getDeviceToken();
        Message message = new Message.Builder().addData("alert", row.getMessage()).addData("sound", "default").addData("badge", "1").build();
            
            System.out.println(regId);
            System.out.println(row.getMessage());
        try {
            Result res = sender.send(message, regId, 5);
            String id = res.getMessageId();
            String cregId = res.getCanonicalRegistrationId();
            String errorCode = res.getErrorCodeName();
            row.setProcessFlag("Y");
            retMsg = retMsg + "Message pushed : Id : " + id + "; CRegId: " + cregId + "; ErrorCode : " + errorCode + "\n";
            
        } catch (Exception e) {
            e.printStackTrace();
            return e.getMessage() + "retMsg";
        }
            
        }
        this.getDBTransaction().commit();
        return retMsg;
    }
    
   

    /**
     * Container's getter for XxMyLocationsVO.
     * @return XxMyLocationsVO
     */
    public ViewObjectImpl getXxMyLocationsVO() {
        return (ViewObjectImpl) findViewObject("XxMyLocationsVO");
    }

    /**
     * Container's getter for XxMyOrdersVO1.
     * @return XxMyOrdersVO1
     */
    public ViewObjectImpl getXxMyOrdersVO1() {
        return (ViewObjectImpl) findViewObject("XxMyOrdersVO1");
    }

    /**
     * Container's getter for XxMyOrderDetailsVO1.
     * @return XxMyOrderDetailsVO1
     */
    public ViewObjectImpl getXxMyOrderDetailsVO1() {
        return (ViewObjectImpl) findViewObject("XxMyOrderDetailsVO1");
    }

    /**
     * Container's getter for XxMyOrdersVOToXxMyOrderDetailsVO.
     * @return XxMyOrdersVOToXxMyOrderDetailsVO
     */
    public ViewLinkImpl getXxMyOrdersVOToXxMyOrderDetailsVO() {
        return (ViewLinkImpl) findViewLink("XxMyOrdersVOToXxMyOrderDetailsVO");
    }

    /**
     * Container's getter for XxMyOrdersDateSortedVO1.
     * @return XxMyOrdersDateSortedVO1
     */
    public ViewObjectImpl getXxMyOrdersDateSortedVO1() {
        return (ViewObjectImpl) findViewObject("XxMyOrdersDateSortedVO1");
    }

    /**
     * Container's getter for XxMyOrderDetailsVO2.
     * @return XxMyOrderDetailsVO2
     */
    public ViewObjectImpl getXxMyOrderDetailsVO2() {
        return (ViewObjectImpl) findViewObject("XxMyOrderDetailsVO2");
    }

    /**
     * Container's getter for XxMyordersDateSortedVOToXxMyOrderDetailsVO1.
     * @return XxMyordersDateSortedVOToXxMyOrderDetailsVO1
     */
    public ViewLinkImpl getXxMyordersDateSortedVOToXxMyOrderDetailsVO1() {
        return (ViewLinkImpl) findViewLink("XxMyordersDateSortedVOToXxMyOrderDetailsVO1");
    }

    /**
     * Container's getter for XxmyorderAlertDetailsVO1.
     * @return XxmyorderAlertDetailsVO1
     */
    public ViewObjectImpl getXxmyorderAlertDetailsVO1() {
        return (ViewObjectImpl) findViewObject("XxmyorderAlertDetailsVO1");
    }
    
    static Scheduler sched=null;
        String jobName="";

    public void startPollingJob(){
        SchedulerFactory schedFact = new org.quartz.impl.StdSchedulerFactory();
        System.out.println("In pollexec");
        
        try{
          sched = schedFact.getScheduler();
            
          sched.start();
        jobName="myJob"+UUID.randomUUID().toString();
            JobDetail job = newJob(NotifPoll.class)
                .withIdentity(jobName, "group1")
                .build();
        // Trigger the job to run now, and then every 10 minutes
        Trigger  trigger =
                TriggerBuilder.newTrigger().withIdentity(jobName)
                 .withSchedule(CronScheduleBuilder.cronSchedule("0 0/10 * 1/1 * ? *")).withPriority(1)
                 .startNow().build();

        // Tell quartz to schedule the job using our trigger
         sched.scheduleJob(job, trigger);
            System.out.println("After sched");
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
    
    /**Method to call Database function
        * @param sqlReturnType (Return type of Function)
        * @param stmt (Function Name with Parameters)
        * @param bindVars (Parameter's Value)
        * @return
        */
       protected Object callAlertFunction() {
           CallableStatement cst = null;
           int sqlReturnType = Types.VARCHAR;
           String stmt = "xxmyorders_get_all_alerts";
           try {
               //Creating sql statement
               cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               //Register dataType for return value
               cst.registerOutParameter(1, sqlReturnType);
               //Pass input parameters value
              
               cst.executeUpdate();
               //Finally get returned value
               return cst.getObject(1);
           } catch (SQLException e) {
               throw new JboException(e.getMessage());
           } finally {
               if (cst != null) {
                   try {
                       cst.close();
                   } catch (SQLException e) {
                       e.printStackTrace();
                   }
               }
           }
       }


    /**
     * Container's getter for XxMyOrderARHeaderVO1.
     * @return XxMyOrderARHeaderVO1
     */
    public ViewObjectImpl getXxMyOrderARHeaderVO1() {
        return (ViewObjectImpl) findViewObject("XxMyOrderARHeaderVO1");
    }

    /**
     * Container's getter for XxMyOrderARLinesVO1.
     * @return XxMyOrderARLinesVO1
     */
    public ViewObjectImpl getXxMyOrderARLinesVO1() {
        return (ViewObjectImpl) findViewObject("XxMyOrderARLinesVO1");
    }

    /**
     * Container's getter for XxMyOrderARHeaderToLinesVL1.
     * @return XxMyOrderARHeaderToLinesVL1
     */
    public ViewLinkImpl getXxMyOrderARHeaderToLinesVL1() {
        return (ViewLinkImpl) findViewLink("XxMyOrderARHeaderToLinesVL1");
    }

    /**
     * Container's getter for XxMyOrderARLinesVO2.
     * @return XxMyOrderARLinesVO2
     */
    public ViewObjectImpl getXxMyOrderARLinesVO2() {
        return (ViewObjectImpl) findViewObject("XxMyOrderARLinesVO2");
    }

    /**
     * Container's getter for XxMyOrderARHeaderDDVO1.
     * @return XxMyOrderARHeaderDDVO1
     */
    public ViewObjectImpl getXxMyOrderARHeaderDDVO1() {
        return (ViewObjectImpl) findViewObject("XxMyOrderARHeaderDDVO1");
    }

    /**
     * Container's getter for XxMyOrderARLinesVO3.
     * @return XxMyOrderARLinesVO3
     */
    public ViewObjectImpl getXxMyOrderARLinesVO3() {
        return (ViewObjectImpl) findViewObject("XxMyOrderARLinesVO3");
    }

    /**
     * Container's getter for XxMyOrderARHeaderDDToLinesVL1.
     * @return XxMyOrderARHeaderDDToLinesVL1
     */
    public ViewLinkImpl getXxMyOrderARHeaderDDToLinesVL1() {
        return (ViewLinkImpl) findViewLink("XxMyOrderARHeaderDDToLinesVL1");
    }
}

